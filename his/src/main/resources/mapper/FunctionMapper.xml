<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.neu.hoso.model.FunctionMapper" >
  <resultMap id="BaseResultMap" type="edu.neu.hoso.model.Function" >
    <constructor >
      <idArg column="Function_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Role_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Function_URL" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="Function_Name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="Reverse1" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Function_ID, Role_ID, Function_URL, Function_Name, Reverse1
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.neu.hoso.example.FunctionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from function
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="edu.neu.hoso.example.FunctionExample" >
    delete from function
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="edu.neu.hoso.model.Function" >
    <selectKey resultType="java.lang.Integer" keyProperty="functionId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into function
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        Role_ID,
      </if>
      <if test="functionUrl != null" >
        Function_URL,
      </if>
      <if test="functionName != null" >
        Function_Name,
      </if>
      <if test="reverse1 != null" >
        Reverse1,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="functionUrl != null" >
        #{functionUrl,jdbcType=VARCHAR},
      </if>
      <if test="functionName != null" >
        #{functionName,jdbcType=VARCHAR},
      </if>
      <if test="reverse1 != null" >
        #{reverse1,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.neu.hoso.example.FunctionExample" resultType="java.lang.Integer" >
    select count(*) from function
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update function
    <set >
      <if test="record.functionId != null" >
        Function_ID = #{record.functionId,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null" >
        Role_ID = #{record.roleId,jdbcType=INTEGER},
      </if>
      <if test="record.functionUrl != null" >
        Function_URL = #{record.functionUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.functionName != null" >
        Function_Name = #{record.functionName,jdbcType=VARCHAR},
      </if>
      <if test="record.reverse1 != null" >
        Reverse1 = #{record.reverse1,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update function
    set Function_ID = #{record.functionId,jdbcType=INTEGER},
      Role_ID = #{record.roleId,jdbcType=INTEGER},
      Function_URL = #{record.functionUrl,jdbcType=VARCHAR},
      Function_Name = #{record.functionName,jdbcType=VARCHAR},
      Reverse1 = #{record.reverse1,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.neu.hoso.model.Function" >
    update function
    <set >
      <if test="roleId != null" >
        Role_ID = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="functionUrl != null" >
        Function_URL = #{functionUrl,jdbcType=VARCHAR},
      </if>
      <if test="functionName != null" >
        Function_Name = #{functionName,jdbcType=VARCHAR},
      </if>
      <if test="reverse1 != null" >
        Reverse1 = #{reverse1,jdbcType=INTEGER},
      </if>
    </set>
    where Function_ID = #{functionId,jdbcType=INTEGER}
  </update>
</mapper>